#!/usr/bin/env python
"""
@author: Pavel Ferkl
"""
from __future__ import division
import os
from blessings import Terminal
import json
from scipy.optimize import newton as newton
from scipy.optimize import minimize_scalar as minimize_scalar
from scipy.optimize import minimize as minimize
import FoamGeometryConstruction_Periodic
import periodicBox
import vtkconv
dx=dy=dz=4 # size of RVE
########## Read input file
with open('input.json') as data_file:
    data = json.load(data_file)
locals().update(data) # Creates variables from dictionary
########## Create terminal for colour output
term = Terminal()
########## Function for finding size of box, which would give desired porosity
def porOpt(vx):
    vx=int(vx)
    vy=vx
    vz=vx
    if os.path.isfile(filename+'.vtk'):
        os.remove(filename+'.vtk')
    if not os.path.isfile(filename+'.ply'):
        raise SystemError(".ply file is missing. Nothing to binarize.")
    os.system("binvox -e -d {0:d} -rotz -rotx -rotz -rotz -t vtk ".format(vx)+
        filename+".ply >binvox.out")
    with open('binvox.out') as data_file:
        for line in data_file:
            if "counted" in line:
                solidVoxel,totalVoxel=\
                    [int(s) for s in line.split() if s.isdigit()]
                eps=1-solidVoxel/totalVoxel
                print "porosity: {0:f}".format(eps)
                return (eps-porosity)**2
########## Function for finding size of box and strut size parameter, which
# would give desired porosity and strut content
def porfsOpt(x):
    print x
    filename="PeriodicRVEBox"
    vx=int(x[0])
    vy=vx
    vz=vx
    dstrut=x[1]
    if os.path.isfile(filename+'.vtk'):
        os.remove(filename+'.vtk')
    if not os.path.isfile(filename+'.ply'):
        raise SystemError(".ply file is missing. Nothing to binarize.")
    os.system("binvox -e -d {0:d} -rotz -rotx -rotz -rotz -t vtk ".format(vx)+
        filename+".ply >binvox.out")
    filenameIn = filename+".vtk"
    filename = filename+"-ascii"
    filenameOut = filename+".vtk"
    origin=[dx,dy,dz]
    spacing=[dx/vx,dy/vy,dz/vz]
    vtkconv.main(filenameIn,filenameOut,origin,spacing)
    f=open("foamreconstr.in","w")
    f.write("0\n")
    f.write("1\n")
    f.write("0\n")
    f.write("0\n")
    f.write("0\n")
    f.write("0\n")
    f.write("{0:f}\n".format(dstrut))
    f.write("0\n")
    f.write("1\n")
    f.write("0\n")
    f.write("0\n")
    f.write("0\n")
    f.write("0\n")
    f.write("0\n")
    f.write("0\n")
    f.write("1\n")
    f.write("0\n")
    f.write("1\n")
    f.write("morphology\n")
    f.write("PeriodicRVEBox-ascii.vtk\n")
    f.write("PeriodicRVE.gnu\n")
    f.write("name\n")
    f.write("decriptors.out\n")
    f.close()
    os.system("./foamreconstr/foamreconstr")
    f=open("decriptors.out","r")
    eps=f.readline()
    fs=f.readline()
    f.close()
    eps=float(eps)
    fs=float(fs)
    resid=((eps-porosity)/porosity)**2+((fs-strutContent)/strutContent)**2
    print resid
    return resid
########## Create periodic RVE of foam
print(
    term.yellow +
    "Create periodic RVE of foam" +
    term.normal
)
FoamGeometryConstruction_Periodic.main(MU,SIGMA,NumOfCells,filename,packing,\
    tesselation,geometry,statistics,hypermesh,deleteFiles,dx,dy,dz)
if moveToPeriodicBox:
    ########## Convert .geo to .stl
    print(
        term.yellow +
        "Convert .geo to .stl" +
        term.normal
    )
    os.system("gmsh -n -2 -format stl "+filename+".geo >gmsh.out")
    if deleteFiles:
        os.remove("gmsh.out")
    ########## Move to periodic box
    print(
        term.yellow +
        "Move to periodic box" +
        term.normal
    )
    filenameIn = filename+".stl"
    filename = filename+"Box"
    filenameOut = filename+".stl"
    xmin=dx
    ymin=dy
    zmin=dz
    periodicBox.main(filenameIn,filenameOut,xmin,ymin,zmin,dx,dy,dz,renderBox)
    if deleteFiles:
        os.remove(filenameIn)
    ########## Convert .stl to .ply
    print(
        term.yellow +
        "Convert .stl to .ply" +
        term.normal
    )
    os.system("meshconv "+filename+".stl -c ply")
if binarizeBox:
    ########## Binarize and save as .vtk
    if deleteFiles and os.path.isfile(filename+'.stl'):
        os.remove(filename+'.stl')
    print(
        term.yellow +
        "Binarize and save as .vtk" +
        term.normal
    )
    # Find the size of box, which would give desired porosity
    # This method is not optimal, since the solver doesn't know that the
    # function takes only integer arguments
    # res=minimize_scalar(porOpt,bracket=[100,120],method='Brent',tol=1e-2)
    # vx=res.x
    # vx=int(vx)
    # vy=vx
    # vz=vx
    # print 'box size: {0:d}'.format(vx)
    # porOpt(vx) # Call it with the optimized box size
    # if deleteFiles:
    #     os.remove("binvox.out")
    #     os.remove(filename+".ply")
    x0=[220,5]
    res=minimize(porfsOpt,x0,method='Nelder-Mead',tol=5e-2)
    print res
    ########## Convert binary .vtk to ascii .vtk
    # print(
    #     term.yellow +
    #     "Convert binary .vtk to ascii .vtk" +
    #     term.normal
    # )
    # filenameIn = filename+".vtk"
    # filename = filename+"-ascii"
    # filenameOut = filename+".vtk"
    # origin=[dx,dy,dz]
    # spacing=[dx/vx,dy/vy,dz/vz]
    # vtkconv.main(filenameIn,filenameOut,origin,spacing)
    # if deleteFiles:
    #     os.remove(filenameIn)
